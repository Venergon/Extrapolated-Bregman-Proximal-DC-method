function [outputArg1,outputArg2] = argmin_cauchy(A, b, dD, w, xi, L, t, x_prev, lambda, max_eigval, thresholding_iterations, gamma)
% Finds argmin {lambda*g(x) + <df(w) - xi, x-w> + L/2*||x-w||_2^2 + 1/t*D(x,
% x_prev)
% Where g(x) is the modified cauchy priority g(x) = -sum(log(gamma/(x_i^2 +
% gamma)) + M*||x||_2^2 (the second term ensuring that the equation is
% convex with M = 2

% Differentiating the whole thing gives us the equation
% (2*M + L)x_i^3 + (df(w) - xi - L*w_i)x_i^2 + (2 + 2*M*gamma + gamma*L)x_i
% + (gamma*df(w) - xi*gamma - gamma*L*w_i) + (x_i^2 + gamma)/2 * d/dx_i(D(x, x_prev))= 0 as the stationary point

% TODO: For now we're assuming D(x, x_prev) = 0, as with that the whole
% equation is a cubic which can be solved, will need to make a case for
% each distance function
df = A'*(A*w - b);

for n=1:thresholding_iterations
    
    
    for i=1:
end
end

